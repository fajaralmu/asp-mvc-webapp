@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using OrgWebMvc.Main.Util
@using System.Collections.Generic

<div>
    <script src="~/Scripts/ajax.js"></script>
    <h2>@ViewData["Entity"] Management</h2>
    <!--@@CustomHelper.GenerateForm((Type)ViewData["EntityType"])-->
    <div id="entity-form"></div>
    <!-- @@CustomHelper.GenerateTable((Type)ViewData["EntityType"], (List<object>)ViewData["EntityList"])
    -->
    <div  id="info-list">
        <p style="display:none">Offset: <span id="info-offset"></span></p>

        <p style="display:none">Total: <span id="info-total"></span></p>
        <p>Limit:</p>
        <select style="width:10%" id="select-limit" onchange="updateLimit()">
            <option value="5">5</option>
            <option value="10">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
        </select>
        <p></p>
    </div>
    <div id="button-list" class="btn-group-justified"></div>
    <div id="entity-list">

    </div>
    <script>
        let limit = 5;
        let offset = 0;
        let total = 0;
        let inputs = document.getElementsByName("input-entity");
        let tableList = document.getElementById("entity-list");
        let formPanel = document.getElementById("entity-form");
        let infoLimit = document.getElementById("select-limit");
        let infoOffset = document.getElementById("info-offset");
        let infoTotal = document.getElementById("info-total");
        let buttonList = document.getElementById("button-list");
        let buttonSortList = document.getElementsByName("button-sort");
        let filterFields = document.getElementsByName("filter-box");
        let search_params = null;
        let search_params_obj = {};
        let lastFilterBoxFocus = "";
        let currentSortBy = "";
        let currentSortType = "";

        let URL = "/Entity/@ViewData["Entity"]Svc";
        let URLRaw = "/Entity/$name$Svc";
        function submitEvent(e) {
            e.preventDefault();

            let c = confirm("Are you ready?");
            if (c == false) {
                return;
            }

            let params = "Action=Post";
            let fieldParams = "field_param=${";
            for (let i = 0; i < inputs.length; i++) {
                let field = inputs[i];
                let value = field.value;
                console.log("TYPE of FIELD", (field));
                fieldParams += field.id + "=" + value;
                if (i < inputs.length - 1) {
                    fieldParams += ";";
                }

            }

            fieldParams += "}$";
            params += "&" + fieldParams;
            postReq(URL, params, function (data) {
                if (data.code == 0) {
                    alert("Success");
                    clearField(inputs);
                    loadList();
                } else {
                    alert("Failed");
                }
                console.log("response from api", data);
            }, function (data) {
                alert("Server Error");
                console.log("error", data);
            });

            return false;
        }

        function loadList() {
            let params = "Action=List&limit=" + limit + "&offset=" + offset;
            if (search_params != null) {
                params += "&search_param=${" + search_params + "}$";
            }
            postReq(URL, params, function (data) {
                let jsonResp = data;
                console.log("JSON", jsonResp);
                if (jsonResp.code == 0) {
                    tableList.innerHTML = jsonResp.data;
                    total = jsonResp.count;
                    refreshInfo();
                    generateButton();
                } else {
                    alert("Error loading")
                }
                fillFilterBox();
            }, function (data) {
                alert("Server Error");
               
            });
        }

        function refreshInfo() {
            infoLimit.value = limit;
            infoOffset.innerHTML = offset;
            infoTotal.innerHTML = total;
        }

        function clearField(elements) {
            generateForm(null);
            for (let i = 0; i < elements.length; i++) {
                elements[i].value = "";
            }
        }

        function generateButton() {
            buttonList.innerHTML = "";
            let buttonCount = Math.ceil(total / limit);
            for (let i = 0; i < buttonCount; i++) {
                let btn = document.createElement("button");
                let className = "btn btn-info";
                if (i == offset) {
                    className += " active";
                }
                btn.className = className;
                btn.id = "btn-" + i;
                btn.innerHTML = (i + 1);
                let offst = i;
                btn.onclick = function (e) {
                    setNavProperty(limit, offst);
                    loadList();
                };

                buttonList.appendChild(btn);
            }
            for (let i = 0; i < buttonSortList.length; i++) {
                let btn = buttonSortList[i];
                if (btn.id == currentSortType + "-" + currentSortBy) {
                    btn.className = "btn active";
                    btn.style.fontWeight = "bold";
                }
            }
        }

        function updateLimit() {
            setNavProperty(infoLimit.value, 0);
            loadList();
        }

        function setNavProperty(_limit, _offset) {
            limit = _limit;
            offset = _offset;
        }

        function generateForm(id) {
            let param = "Action=Form";
            if (id != null) {
                param += "&Id=" + id;
            }
            postReq(URL, param, function (response) {
                formPanel.innerHTML = response.data;
            }, function (data) {
                alert("Server error");
            })
        }

        function editEntity(id) {
            generateForm(id);
        }

        function deleteEntity(id) {
            if (!confirm("Do you want to delete this record?")) {
                return;
            }
            postReq(URL, "Action=Delete&Id=" + id, function (response) {
                if (response.code == 0) {
                    alert("Success");
                    loadList();
                }
            }, function (response) {
                alert("server error");
            });
        }

        function fillComboBox(cbxId, classReffName, classReffAttr, helper) {
            let value = helper.value;
            console.log(cbxId, classReffName, classReffAttr, value);
            let comboBox = document.getElementById(cbxId);
            comboBox.innerHTML = "";
            let CustomUrl = URLRaw.replace("$name$", classReffName);
            postReq(CustomUrl, "Action=List&Type=JSONList&limit=" + 10 + "&offset=" + 0 + "&search_param=${" + classReffAttr + "=" + value + "}$",
                function (response) {

                    if (response.code == 0 && response.count > 0) {
                        let listResp = response.data;
                        //  console.log("JSON", jsonResp);
                        for (let i = 0; i < listResp.length; i++) {
                            let obj = listResp[i];
                            let option = document.createElement("option");
                            option.value = obj["id"];
                            option.innerHTML = obj[classReffAttr];

                            comboBox.appendChild(option);
                        }
                    } else {
                        //  alert("Error loading")
                    }
                }, function (response) {
                    alert("Server Error");
                });
        }

        function setValue(elementId, value) {
            document.getElementById(elementId).value = value;
        }

        function fillSearchParam() {
            search_params = "";
            for (let key in search_params_obj) {
                
                if (search_params_obj.hasOwnProperty(key)){
                    let param_item =(key + "=" + search_params_obj[key] + ";");
                    search_params += param_item;
                    console.log("key", param_item);
                }
            }
            console.log("search param: ", search_params);
        }

        function fillFilterBox() {
            for (let i = 0; i < filterFields.length; i++) {
                let filterField = filterFields[i];
                for (let key in search_params_obj) {
                    if (filterField.id == "filter-" + key)
                    {
                        filterField.value = search_params_obj[key];
                    }
                    if (filterField.id == lastFilterBoxFocus) {
                        filterField.focus();
                    }
                }
            }
        }

        function sortEntity(sortBy, sortType) {
            filterEntity(null, sortBy, sortType);
        }

        function filterEntity(element) {
            filterEntity(element, null, null);
        }

        function filterEntity(element, sortBy, sortType) {
            if(element!=null)
                lastFilterBoxFocus = element.id;
            search_params = null;
            search_params_obj = {};
            if (sortBy != null && sortType != null) {
                currentSortBy = sortBy;
                currentSortType = sortType;
                
            }
            search_params_obj['orderby'] = currentSortBy;
            search_params_obj['ordertype'] = currentSortType;

            for (let i = 0; i < filterFields.length; i++) {
                let filterField = filterFields[i];
                if (filterField.value != null && filterField.value != "") {
                    let param_name = filterField.id.replace("filter-", "");
                    search_params_obj[param_name] = filterField.value;
                }
            }
            console.log("search params obj", search_params_obj);
            fillSearchParam();
            loadList();
        }

        generateForm(null);
        loadList();
    </script>
</div>
