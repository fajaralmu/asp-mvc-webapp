//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrgWebMvc.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Reflection;

    public partial class INST_DBEntities : DbContext
    {
        public INST_DBEntities()
            : base("name=INST_DBEntities")
        {
        }


        private static INST_DBEntities dbEntities = null;


        public static INST_DBEntities Instance()
        {

            if (dbEntities == null || IsDisposed(dbEntities))
            {
                dbEntities = new INST_DBEntities();
            }
            return dbEntities;
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }

        public virtual DbSet<division> divisions { get; set; }
        public virtual DbSet<@event> events { get; set; }
        public virtual DbSet<member> members { get; set; }
        public virtual DbSet<program> programs { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<user> users { get; set; }
        public virtual DbSet<post> posts { get; set; }

        private static bool IsDisposed(DbContext context)
        {
            if (context == null) return false;
            var result = true;

            var typeDbContext = typeof(DbContext);
            var typeInternalContext = typeDbContext.Assembly.GetType("System.Data.Entity.Internal.InternalContext");

            var fi_InternalContext = typeDbContext.GetField("_internalContext", BindingFlags.NonPublic | BindingFlags.Instance);
            var pi_IsDisposed = typeInternalContext.GetProperty("IsDisposed");

            var ic = fi_InternalContext.GetValue(context);

            if (ic != null)
            {
                result = (bool)pi_IsDisposed.GetValue(ic);
            }

            return result;
        }

    }
}
